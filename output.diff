diff --git a/clash-eth.cabal b/clash-eth.cabal
index bf607ff..b98230d 100644
--- a/clash-eth.cabal
+++ b/clash-eth.cabal
@@ -119,7 +119,6 @@ library
     Protocols.Extra.PacketStream.AsyncFIFO
     Protocols.Extra.PacketStream.Converters
     Protocols.Extra.PacketStream.PacketBuffer
-    Protocols.Extra.PacketStream.DelayCircuit
     Protocols.Extra.PacketStream.Packetizers
     Protocols.Extra.PacketStream.Routing
     Protocols.Extra.PacketStream
@@ -175,7 +174,6 @@ test-suite test-library
     Test.Protocols.Extra.PacketStream.PacketBuffer
     Test.Protocols.Extra.PacketStream.Packetizers
     Test.Protocols.Extra.PacketStream.Routing
-    Test.Protocols.Extra.PacketStream.DelayCircuit
     Test.Protocols.Extra.PacketStream
   build-depends:
     clash-eth,
diff --git a/outpuf.dif b/outpuf.dif
deleted file mode 100644
index 8780c6c..0000000
--- a/outpuf.dif
+++ /dev/null
@@ -1,39 +0,0 @@
-diff --git a/clash-eth.cabal b/clash-eth.cabal
-index b98230d..bf607ff 100644
---- a/clash-eth.cabal
-+++ b/clash-eth.cabal
-@@ -119,6 +119,7 @@ library
-     Protocols.Extra.PacketStream.AsyncFIFO
-     Protocols.Extra.PacketStream.Converters
-     Protocols.Extra.PacketStream.PacketBuffer
-+    Protocols.Extra.PacketStream.DelayCircuit
-     Protocols.Extra.PacketStream.Packetizers
-     Protocols.Extra.PacketStream.Routing
-     Protocols.Extra.PacketStream
-@@ -174,6 +175,7 @@ test-suite test-library
-     Test.Protocols.Extra.PacketStream.PacketBuffer
-     Test.Protocols.Extra.PacketStream.Packetizers
-     Test.Protocols.Extra.PacketStream.Routing
-+    Test.Protocols.Extra.PacketStream.DelayCircuit
-     Test.Protocols.Extra.PacketStream
-   build-depends:
-     clash-eth,
-diff --git a/tests/unittests.hs b/tests/unittests.hs
-index a94d717..e63cff7 100644
---- a/tests/unittests.hs
-+++ b/tests/unittests.hs
-@@ -19,7 +19,7 @@ import Test.Protocols.Extra.PacketStream.Converters qualified
- import Test.Protocols.Extra.PacketStream.PacketBuffer qualified
- import Test.Protocols.Extra.PacketStream.Packetizers qualified
- import Test.Protocols.Extra.PacketStream.Routing qualified
--
-+import Test.Protocols.Extra.PacketStream.DelayCircuit qualified
- 
- main :: IO ()
- main = defaultMain $ testGroup "."
-@@ -40,4 +40,5 @@ main = defaultMain $ testGroup "."
-   , Test.Protocols.Extra.PacketStream.Packetizers.tests
-   , Test.Protocols.Extra.PacketStream.Routing.tests
-   , Test.Protocols.Extra.PacketStream.tests
-+  , Test.Protocols.Extra.PacketStream.DelayCircuit.tests
-   ]
diff --git a/output.diff b/output.diff
deleted file mode 100644
index e69de29..0000000
diff --git a/src/Protocols/Extra/PacketStream/DelayCircuit.hs b/src/Protocols/Extra/PacketStream/DelayCircuit.hs
deleted file mode 100644
index fde3ef9..0000000
--- a/src/Protocols/Extra/PacketStream/DelayCircuit.hs
+++ /dev/null
@@ -1,113 +0,0 @@
-{-# language FlexibleContexts #-}
-
-{-|
-Module      : Protocols.Extra.PacketStream.DelayCircuit
-Description : Circuits to delay a packet stream by a fixed amount of words, releasing all words in a packet if the "last" word is processed.
--}
-module Protocols.Extra.PacketStream.DelayCircuit
-  ( bufferIC
-  ) where
-
-import Clash.Prelude
-import Protocols
-import Protocols.DfConv ( fifo )
-import Protocols.Extra.PacketStream
--- proxy
-import Data.Data ( Proxy(Proxy) )
--- maybe
-import Data.Maybe ( isJust )
-
-bufferIC :: forall (dom :: Domain) (dataWidth :: Nat) (storeI :: Nat)
-  .  KnownDomain dom
-  => KnownNat dataWidth
-  => HiddenClockResetEnable dom
-  => 1 <= storeI
-  => SNat storeI
-  -- ^ The number of packets the buffer will delay
-  -> Circuit
-    (PacketStream dom dataWidth ())
-    (PacketStream dom dataWidth ())
-bufferIC store = forceResetSanity |> fromSignals (bufferI store)
-
-data BufferIState storing =
-  BufferIState {
-    _storing :: Index storing
-    , _lastAmount :: Index storing
-    , _read :: Bool
-    , _wasLastr :: Bool
-    , _wrote :: Bool
-    , _wasReadw :: Bool 
-  } deriving (Generic, NFDataX)
--- | A buffer that delays the input by a fixed amount of words, releasing al words in a packet if the "last" word is processed.
-bufferI
-  :: forall (dom :: Domain) (dataWidth :: Nat) (storeI :: Nat)
-  .  HiddenClockResetEnable dom
-  => KnownNat dataWidth
-  => 1 <= storeI
-  => SNat storeI
-  -- ^ The number of packets the buffer will delay
-  -> ( Signal dom (Maybe (PacketStreamM2S dataWidth ()))
-     , Signal dom PacketStreamS2M
-     )
-  -> ( Signal dom PacketStreamS2M
-     , Signal dom (Maybe (PacketStreamM2S dataWidth ()))
-     )
-bufferI storeI@SNat (fwdIn, bwdIn) = (bwdOut, fwdOut)
-  where
-    bwdOut = PacketStreamS2M <$> ((&&) <$> (_ready <$> bwdFifo) <*> (_ready <$> bwdFifoIn))
-    fwdOut = mux r_en outFifo $ pure Nothing
-
-    bwdFifo :: Signal dom PacketStreamS2M
-    outFifo :: Signal dom (Maybe (PacketStreamM2S dataWidth ()))
-    (bwdFifo, outFifo) = toSignals fifoC (fwdFifoIn, bwdFifoIn)
-
-    fifoC :: Circuit (PacketStream dom dataWidth ()) (PacketStream dom dataWidth ())
-    fifoC = fifo (Proxy :: Proxy (PacketStream dom dataWidth ())) (Proxy :: Proxy (PacketStream dom dataWidth ())) (succSNat storeI)
-
-    fwdFifoIn :: Signal dom (Maybe (PacketStreamM2S dataWidth ()))
-    fwdFifoIn = mux w_en fwdIn $ pure Nothing
-    bwdFifoIn :: Signal dom PacketStreamS2M
-    bwdFifoIn = mux readPrevious bwdIn $ pure (PacketStreamS2M False)
-    readPrevious = register False r_en
-
-    w_en, r_en :: Signal dom Bool
-    (w_en, r_en) = unbundle $ mealy go (BufferIState 0 0 False False False False) (bundle (fwdIn, bwdIn, outFifo))
-
-    go ::
-      BufferIState storeI
-      -> (Maybe (PacketStreamM2S dataWidth ()), PacketStreamS2M, Maybe (PacketStreamM2S dataWidth ()))
-      -> (BufferIState storeI, (Bool, Bool))
-    go (BufferIState storing lastAmount wasRead wasLastr wrote wasLastw) (input, bwd, fifoOut) =  (nextSt, out)
-      where
-        out = (writeEnable, readEnable)
-
-        nextSt = BufferIState storing' lastAmount' readEnable wasLastr' writeEnable wasLastw'
-
-        wasLastr' = readEnable && maybe False (isJust . _last) fifoOut
-        wasLastw' = writeEnable && maybe False (isJust . _last) input
-
-        -- gaan we volgende cycle naar de buffer schrijven
-        writeEnable = isJust input && storing' < maxBound
-        -- storing < maxBound, write the word to buffer 
-        -- we are not allowed to assume that the word we output will be acked in one go, 
-        --    so maximum throughput is not allowed
-        readEnable = (lastAmount' > 0) || (storing' >= maxBound) 
-        -- we mogen lezen 
-        --    als het einde van een pakket in de buffer zit
-        --    of als we het benodigde aantal words hebben 
-        --    of als we een minder dan maxBound words hebben en we gaan ook schrijven
-
-        -- storing is vorige state
-        -- storing' is huidige state
-        storing' =
-          (if readItem then pred else id)
-          . (if wrote then succ else id)
-          $ storing
-        -- lastAmount = vorige state
-        -- lastAmount' = current state
-        lastAmount' =
-          (if readItem && wasLastr then pred else id)
-          . (if wrote && wasLastw then succ else id)
-          $ lastAmount
-
-        readItem = wasRead && _ready bwd 
diff --git a/tests/Test/Protocols/Extra/PacketStream/DelayCircuit.hs b/tests/Test/Protocols/Extra/PacketStream/DelayCircuit.hs
deleted file mode 100644
index bd1e73f..0000000
--- a/tests/Test/Protocols/Extra/PacketStream/DelayCircuit.hs
+++ /dev/null
@@ -1,62 +0,0 @@
-{-# language FlexibleContexts #-}
-{-# language NumericUnderscores #-}
-{-# language RecordWildCards #-}
-
-module Test.Protocols.Extra.PacketStream.DelayCircuit where
--- base
-import Prelude
-
--- clash-prelude
-import Clash.Prelude hiding ( drop, take, undefined, (++) )
-import Clash.Prelude qualified as C
-
--- hedgehog
-import Hedgehog as H
-import Hedgehog.Gen qualified as Gen
-import Hedgehog.Range qualified as Range
-
--- tasty
-import Test.Tasty
-import Test.Tasty.Hedgehog ( HedgehogTestLimit(HedgehogTestLimit) )
-import Test.Tasty.Hedgehog.Extra ( testProperty )
-import Test.Tasty.TH ( testGroupGenerator )
-
--- clash-protocols
-import Protocols (Circuit)
-import Protocols.Extra.PacketStream (PacketStreamM2S(..), PacketStream)
-import Protocols.Extra.PacketStream.DelayCircuit ( bufferIC )
-import Protocols.Hedgehog ( idWithModelSingleDomain, defExpectOptions )
-import Test.Protocols.Extra.PacketStream ( makeValid)
-
-genVec :: (C.KnownNat n, 1 C.<= n) => Gen a -> Gen (C.Vec n a)
-genVec gen = sequence (C.repeat gen)
-
-
-genWord :: Gen (PacketStreamM2S 4 ())
-genWord =  PacketStreamM2S <$>
-              genVec Gen.enumBounded <*>
-              Gen.maybe Gen.enumBounded <*>
-              Gen.enumBounded <*>
-              Gen.enumBounded
-
-genPackets :: Range Int -> Gen [PacketStreamM2S 4 ()]
-genPackets range = makeValid <$> Gen.list range genWord
-
--- | test for id
-prop_delay_circuit_id :: Property
-prop_delay_circuit_id =
-  idWithModelSingleDomain
-    @C.System
-    defExpectOptions
-    (genPackets (Range.linear 0 100))
-    (C.exposeClockResetEnable id)
-    (C.exposeClockResetEnable ckt)
- where
-  ckt :: HiddenClockResetEnable System => Circuit (PacketStream System 4 ()) (PacketStream System 4 ())
-  ckt = bufferIC d5
-
-tests :: TestTree
-tests =
-    localOption (mkTimeout 12_000_000 {- 12 seconds -})
-  $ localOption (HedgehogTestLimit (Just 1_000))
-  $(testGroupGenerator)
diff --git a/tests/unittests.hs b/tests/unittests.hs
index 746486f..a94d717 100644
--- a/tests/unittests.hs
+++ b/tests/unittests.hs
@@ -19,28 +19,25 @@ import Test.Protocols.Extra.PacketStream.Converters qualified
 import Test.Protocols.Extra.PacketStream.PacketBuffer qualified
 import Test.Protocols.Extra.PacketStream.Packetizers qualified
 import Test.Protocols.Extra.PacketStream.Routing qualified
-import Test.Protocols.Extra.PacketStream.DelayCircuit qualified
+
 
 main :: IO ()
 main = defaultMain $ testGroup "."
-  [ 
-  --   Test.Cores.Ethernet.Arp.ArpManager.tests
-  -- , Test.Cores.Ethernet.Arp.ArpTable.tests
-  -- , Test.Cores.Ethernet.IP.InternetChecksum.tests
-  -- , Test.Cores.Ethernet.IP.IPPacketizers.tests
-  -- , Test.Cores.Ethernet.Mac.EthernetTypes.tests
-  -- , Test.Cores.Ethernet.Mac.FrameCheckSequence.tests
-  -- , Test.Cores.Ethernet.Mac.InterpacketGapInserter.tests
-  -- , Test.Cores.Ethernet.Mac.MacPacketizers.tests
-  -- , Test.Cores.Ethernet.Mac.PaddingInserter.tests
-  -- , Test.Cores.Ethernet.Mac.Preamble.tests
-  -- , Test.Cores.Ethernet.Icmp.tests
-  -- , Test.Protocols.Extra.PacketStream.AsyncFIFO.tests
-  -- , Test.Protocols.Extra.PacketStream.Converters.tests
-  -- , Test.Protocols.Extra.PacketStream.PacketBuffer.tests
-  -- , Test.Protocols.Extra.PacketStream.Packetizers.tests
-  -- , Test.Protocols.Extra.PacketStream.Routing.tests
-  -- , Test.Protocols.Extra.PacketStream.tests
-  -- , 
-  Test.Protocols.Extra.PacketStream.DelayCircuit.tests
+  [ Test.Cores.Ethernet.Arp.ArpManager.tests
+  , Test.Cores.Ethernet.Arp.ArpTable.tests
+  , Test.Cores.Ethernet.IP.InternetChecksum.tests
+  , Test.Cores.Ethernet.IP.IPPacketizers.tests
+  , Test.Cores.Ethernet.Mac.EthernetTypes.tests
+  , Test.Cores.Ethernet.Mac.FrameCheckSequence.tests
+  , Test.Cores.Ethernet.Mac.InterpacketGapInserter.tests
+  , Test.Cores.Ethernet.Mac.MacPacketizers.tests
+  , Test.Cores.Ethernet.Mac.PaddingInserter.tests
+  , Test.Cores.Ethernet.Mac.Preamble.tests
+  , Test.Cores.Ethernet.Icmp.tests
+  , Test.Protocols.Extra.PacketStream.AsyncFIFO.tests
+  , Test.Protocols.Extra.PacketStream.Converters.tests
+  , Test.Protocols.Extra.PacketStream.PacketBuffer.tests
+  , Test.Protocols.Extra.PacketStream.Packetizers.tests
+  , Test.Protocols.Extra.PacketStream.Routing.tests
+  , Test.Protocols.Extra.PacketStream.tests
   ]
